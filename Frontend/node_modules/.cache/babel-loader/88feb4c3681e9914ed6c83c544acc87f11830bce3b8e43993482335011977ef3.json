{"ast":null,"code":"var _jsxFileName = \"/Users/aakashsikarwar/Desktop/React SpringBoot App/travel_plan_management_system1/src/context/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null);\n  const login = (userId, token) => {\n    setUserId(userId);\n    setToken(token);\n    localStorage.setItem('userId', userId);\n    localStorage.setItem('token', token);\n    console.log;\n  };\n  const logout = () => {\n    setUserId(null);\n    setToken(null);\n    localStorage.removeItem('userId');\n    localStorage.removeItem('token');\n  };\n  useEffect(() => {\n    // Attempt to retrieve the token and userId from localStorage on component mount\n    const storedUserId = localStorage.getItem('userId');\n    const storedToken = localStorage.getItem('token');\n    if (storedUserId && storedToken) {\n      setUserId(storedUserId);\n      setToken(storedToken);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      userId,\n      login,\n      logout,\n      token\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"9y+ZtJqMIRi9kiZggXahzW67e7I=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  const {\n    userId,\n    login,\n    logout,\n    token\n  } = context;\n  const isAuthenticated = () => !!token;\n  return {\n    userId,\n    login,\n    logout,\n    isAuthenticated,\n    token\n  };\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","userId","setUserId","token","setToken","login","localStorage","setItem","console","log","logout","removeItem","storedUserId","getItem","storedToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","isAuthenticated","$RefreshReg$"],"sources":["/Users/aakashsikarwar/Desktop/React SpringBoot App/travel_plan_management_system1/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null);\n\n  const login = (userId, token) => {\n    setUserId(userId);\n    setToken(token);\n    localStorage.setItem('userId', userId);\n    localStorage.setItem('token', token);\n    console.log\n  };\n\n  const logout = () => {\n    setUserId(null);\n    setToken(null);\n    localStorage.removeItem('userId');\n    localStorage.removeItem('token');\n  };\n\n  useEffect(() => {\n    // Attempt to retrieve the token and userId from localStorage on component mount\n    const storedUserId = localStorage.getItem('userId');\n    const storedToken = localStorage.getItem('token');\n    if (storedUserId && storedToken) {\n      setUserId(storedUserId);\n      setToken(storedToken);\n    }\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ userId, login, logout, token }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  const { userId, login, logout, token } = context;\n\n  const isAuthenticated = () => !!token;\n\n  return { userId, login, logout, isAuthenticated, token };\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMY,KAAK,GAAGA,CAACJ,MAAM,EAAEE,KAAK,KAAK;IAC/BD,SAAS,CAACD,MAAM,CAAC;IACjBG,QAAQ,CAACD,KAAK,CAAC;IACfG,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEN,MAAM,CAAC;IACtCK,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;IACpCK,OAAO,CAACC,GAAG;EACb,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBR,SAAS,CAAC,IAAI,CAAC;IACfE,QAAQ,CAAC,IAAI,CAAC;IACdE,YAAY,CAACK,UAAU,CAAC,QAAQ,CAAC;IACjCL,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACd;IACA,MAAMkB,YAAY,GAAGN,YAAY,CAACO,OAAO,CAAC,QAAQ,CAAC;IACnD,MAAMC,WAAW,GAAGR,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;IACjD,IAAID,YAAY,IAAIE,WAAW,EAAE;MAC/BZ,SAAS,CAACU,YAAY,CAAC;MACvBR,QAAQ,CAACU,WAAW,CAAC;IACvB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACElB,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEf,MAAM;MAAEI,KAAK;MAAEK,MAAM;MAAEP;IAAM,CAAE;IAAAJ,QAAA,EAC3DA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACpB,EAAA,CAlCWF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAoCzB,OAAO,MAAMwB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGhC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAAC2B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,MAAM;IAAExB,MAAM;IAAEI,KAAK;IAAEK,MAAM;IAAEP;EAAM,CAAC,GAAGqB,OAAO;EAEhD,MAAME,eAAe,GAAGA,CAAA,KAAM,CAAC,CAACvB,KAAK;EAErC,OAAO;IAAEF,MAAM;IAAEI,KAAK;IAAEK,MAAM;IAAEgB,eAAe;IAAEvB;EAAM,CAAC;AAC1D,CAAC;AAACoB,GAAA,CAVWD,OAAO;AAAA,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}