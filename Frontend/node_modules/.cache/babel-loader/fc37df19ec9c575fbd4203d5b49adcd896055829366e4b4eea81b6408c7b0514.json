{"ast":null,"code":"var _jsxFileName = \"/Users/aakashsikarwar/Desktop/React SpringBoot App/travel_plan_management_system1/src/components/UserComponents/TravelPlanList.jsx\",\n  _s = $RefreshSig$();\n// UserLogin.js\nimport React, { useState, useEffect } from \"react\";\nimport AuthService from '../../services/AuthService';\nimport UserService from '../../services/UserService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserLogin() {\n  _s();\n  const [registeredTravelPlans, setRegisteredTravelPlans] = useState([]);\n  const [isUserRegistered, setIsUserRegistered] = useState(false);\n  useEffect(() => {\n    const fetchUserDetails = async () => {\n      try {\n        // Assuming you have a function like getUserById in AuthService\n        const response = await AuthService.getUserById(userId); // Replace userId with the actual user ID\n        const user = response.data;\n        setRegisteredTravelPlans(user.registeredTravelPlans);\n\n        // Check if the currently viewed travel plan is in the registeredTravelPlans\n        setIsUserRegistered(user.registeredTravelPlans.some(plan => plan.id === currentPlanId));\n      } catch (error) {\n        console.error(\"Error fetching user details\", error);\n      }\n    };\n    fetchUserDetails();\n  }, [currentPlanId]);\n  const registerUserForPlan = async () => {\n    try {\n      // Assuming you have the user ID and travel plan ID available\n      const userId = getUserId(); // Replace with the actual way you get the user ID\n      const travelPlanId = currentPlanId;\n\n      // Make an API call to register the user for the selected travel plan\n      await UserService.registerUserToTravelPlan(userId, travelPlanId);\n\n      // Update UI or state variables accordingly\n      setIsUserRegistered(true);\n    } catch (error) {\n      console.error(\"Error registering user for the plan\", error);\n    }\n  };\n  const deregisterUserFromPlan = async () => {\n    try {\n      // Assuming you have the user ID and travel plan ID available\n      const userId = getUserId(); // Replace with the actual way you get the user ID\n      const travelPlanId = currentPlanId;\n\n      // Make an API call to deregister the user from the selected travel plan\n      await UserService.deregisterUserFromTravelPlan(userId, travelPlanId);\n\n      // Update UI or state variables accordingly\n      setIsUserRegistered(false);\n    } catch (error) {\n      console.error(\"Error deregistering user from the plan\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: registeredTravelPlans.map(plan => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: plan.destination\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), isUserRegistered ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deregisterUserFromPlan,\n        children: \"Deregister\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: registerUserForPlan,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, plan.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(UserLogin, \"sMVNOQQHTdXROug7AtjNJ4JjR5U=\");\n_c = UserLogin;\nexport default UserLogin;\nvar _c;\n$RefreshReg$(_c, \"UserLogin\");","map":{"version":3,"names":["React","useState","useEffect","AuthService","UserService","jsxDEV","_jsxDEV","UserLogin","_s","registeredTravelPlans","setRegisteredTravelPlans","isUserRegistered","setIsUserRegistered","fetchUserDetails","response","getUserById","userId","user","data","some","plan","id","currentPlanId","error","console","registerUserForPlan","getUserId","travelPlanId","registerUserToTravelPlan","deregisterUserFromPlan","deregisterUserFromTravelPlan","children","map","destination","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/aakashsikarwar/Desktop/React SpringBoot App/travel_plan_management_system1/src/components/UserComponents/TravelPlanList.jsx"],"sourcesContent":["// UserLogin.js\nimport React, { useState, useEffect } from \"react\";\nimport AuthService from '../../services/AuthService';\nimport UserService from '../../services/UserService';\n\nfunction UserLogin() {\n  const [registeredTravelPlans, setRegisteredTravelPlans] = useState([]);\n  const [isUserRegistered, setIsUserRegistered] = useState(false);\n\n  useEffect(() => {\n    const fetchUserDetails = async () => {\n      try {\n        // Assuming you have a function like getUserById in AuthService\n        const response = await AuthService.getUserById(userId); // Replace userId with the actual user ID\n        const user = response.data;\n\n        setRegisteredTravelPlans(user.registeredTravelPlans);\n\n        // Check if the currently viewed travel plan is in the registeredTravelPlans\n        setIsUserRegistered(user.registeredTravelPlans.some(plan => plan.id === currentPlanId));\n      } catch (error) {\n        console.error(\"Error fetching user details\", error);\n      }\n    };\n\n    fetchUserDetails();\n  }, [currentPlanId]);\n\n  const registerUserForPlan = async () => {\n    try {\n      // Assuming you have the user ID and travel plan ID available\n      const userId = getUserId(); // Replace with the actual way you get the user ID\n      const travelPlanId = currentPlanId;\n\n      // Make an API call to register the user for the selected travel plan\n      await UserService.registerUserToTravelPlan(userId, travelPlanId);\n\n      // Update UI or state variables accordingly\n      setIsUserRegistered(true);\n    } catch (error) {\n      console.error(\"Error registering user for the plan\", error);\n    }\n  };\n\n  const deregisterUserFromPlan = async () => {\n    try {\n      // Assuming you have the user ID and travel plan ID available\n      const userId = getUserId(); // Replace with the actual way you get the user ID\n      const travelPlanId = currentPlanId;\n\n      // Make an API call to deregister the user from the selected travel plan\n      await UserService.deregisterUserFromTravelPlan(userId, travelPlanId);\n\n      // Update UI or state variables accordingly\n      setIsUserRegistered(false);\n    } catch (error) {\n      console.error(\"Error deregistering user from the plan\", error);\n    }\n  };\n\n  return (\n    <div>\n      {/* Display registered travel plans */}\n      {registeredTravelPlans.map((plan) => (\n        <div key={plan.id}>\n          <p>{plan.destination}</p>\n          {/* Show Register/Deregister button based on registration status */}\n          {isUserRegistered ? (\n            <button onClick={deregisterUserFromPlan}>\n              Deregister\n            </button>\n          ) : (\n            <button onClick={registerUserForPlan}>\n              Register\n            </button>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default UserLogin;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}