{"ast":null,"code":"// AuthProvider.jsx\nimport React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[userId,setUserId]=useState(null);const[token,setToken]=useState(null);const[role,setRole]=useState(null);const login=(userId,token,role)=>{setUserId(userId);setToken(token);setRole(role);localStorage.setItem('userId',userId);localStorage.setItem('token',token);localStorage.setItem('role',role);};const logout=()=>{setUserId(null);setToken(null);setRole(null);localStorage.removeItem('userId');localStorage.removeItem('token');localStorage.removeItem('role');};useEffect(()=>{// Attempt to retrieve the token, userId, and role from localStorage on component mount\nconst storedUserId=localStorage.getItem('userId');const storedToken=localStorage.getItem('token');const storedRole=localStorage.getItem('role');if(storedUserId&&storedToken&&storedRole){setUserId(storedUserId);setToken(storedToken);setRole(storedRole);}},[userId,token,role]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{userId,login,logout,token,role},children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}const{userId,login,logout,token,role}=context;const isAuthenticated=()=>!!token;return{userId,login,logout,isAuthenticated,token,role};};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","AuthProvider","_ref","children","userId","setUserId","token","setToken","role","setRole","login","localStorage","setItem","logout","removeItem","storedUserId","getItem","storedToken","storedRole","Provider","value","useAuth","context","Error","isAuthenticated"],"sources":["/Users/aakashsikarwar/Desktop/React SpringBoot App/travel_plan_management_system1/src/context/AuthContext.jsx"],"sourcesContent":["// AuthProvider.jsx\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null);\n  const [role, setRole] = useState(null);\n\n  const login = (userId, token, role) => {\n    setUserId(userId);\n    setToken(token);\n    setRole(role);\n    localStorage.setItem('userId', userId);\n    localStorage.setItem('token', token);\n    localStorage.setItem('role', role);\n  };\n\n  const logout = () => {\n    setUserId(null);\n    setToken(null);\n    setRole(null);\n    localStorage.removeItem('userId');\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n  };\n\n  useEffect(() => {\n    // Attempt to retrieve the token, userId, and role from localStorage on component mount\n    const storedUserId = localStorage.getItem('userId');\n    const storedToken = localStorage.getItem('token');\n    const storedRole = localStorage.getItem('role');\n\n    if (storedUserId && storedToken && storedRole) {\n      setUserId(storedUserId);\n      setToken(storedToken);\n      setRole(storedRole);\n    }\n  }, [userId,token,role]);\n\n  return (\n    <AuthContext.Provider value={{ userId, login, logout, token, role }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  const { userId, login, logout, token, role } = context;\n\n  const isAuthenticated = () => !!token;\n\n  return { userId, login, logout, isAuthenticated, token, role };\n};\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAC9E,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAO,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,MAAM,CAAEC,SAAS,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAACU,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACY,IAAI,CAAEC,OAAO,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAEtC,KAAM,CAAAc,KAAK,CAAGA,CAACN,MAAM,CAAEE,KAAK,CAAEE,IAAI,GAAK,CACrCH,SAAS,CAACD,MAAM,CAAC,CACjBG,QAAQ,CAACD,KAAK,CAAC,CACfG,OAAO,CAACD,IAAI,CAAC,CACbG,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAER,MAAM,CAAC,CACtCO,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEN,KAAK,CAAC,CACpCK,YAAY,CAACC,OAAO,CAAC,MAAM,CAAEJ,IAAI,CAAC,CACpC,CAAC,CAED,KAAM,CAAAK,MAAM,CAAGA,CAAA,GAAM,CACnBR,SAAS,CAAC,IAAI,CAAC,CACfE,QAAQ,CAAC,IAAI,CAAC,CACdE,OAAO,CAAC,IAAI,CAAC,CACbE,YAAY,CAACG,UAAU,CAAC,QAAQ,CAAC,CACjCH,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC,CAChCH,YAAY,CAACG,UAAU,CAAC,MAAM,CAAC,CACjC,CAAC,CAEDjB,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAkB,YAAY,CAAGJ,YAAY,CAACK,OAAO,CAAC,QAAQ,CAAC,CACnD,KAAM,CAAAC,WAAW,CAAGN,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC,CACjD,KAAM,CAAAE,UAAU,CAAGP,YAAY,CAACK,OAAO,CAAC,MAAM,CAAC,CAE/C,GAAID,YAAY,EAAIE,WAAW,EAAIC,UAAU,CAAE,CAC7Cb,SAAS,CAACU,YAAY,CAAC,CACvBR,QAAQ,CAACU,WAAW,CAAC,CACrBR,OAAO,CAACS,UAAU,CAAC,CACrB,CACF,CAAC,CAAE,CAACd,MAAM,CAACE,KAAK,CAACE,IAAI,CAAC,CAAC,CAEvB,mBACET,IAAA,CAACC,WAAW,CAACmB,QAAQ,EAACC,KAAK,CAAE,CAAEhB,MAAM,CAAEM,KAAK,CAAEG,MAAM,CAAEP,KAAK,CAAEE,IAAK,CAAE,CAAAL,QAAA,CACjEA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAkB,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAG3B,UAAU,CAACK,WAAW,CAAC,CACvC,GAAI,CAACsB,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAChE,CAEA,KAAM,CAAEnB,MAAM,CAAEM,KAAK,CAAEG,MAAM,CAAEP,KAAK,CAAEE,IAAK,CAAC,CAAGc,OAAO,CAEtD,KAAM,CAAAE,eAAe,CAAGA,CAAA,GAAM,CAAC,CAAClB,KAAK,CAErC,MAAO,CAAEF,MAAM,CAAEM,KAAK,CAAEG,MAAM,CAAEW,eAAe,CAAElB,KAAK,CAAEE,IAAK,CAAC,CAChE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}