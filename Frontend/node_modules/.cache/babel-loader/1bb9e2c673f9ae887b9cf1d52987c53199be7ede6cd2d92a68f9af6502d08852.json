{"ast":null,"code":"var _jsxFileName = \"/Users/aakashsikarwar/Desktop/React SpringBoot App/travel_plan_management_system1/src/context/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [userId, setUserId] = useState(null);\n\n//   const login = (userId) => {\n//     setUserId(userId);\n//   };\n\n//   const logout = () => {\n//     setUserId(null);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ userId, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n// Import statements\n\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null); // Add this line\n\n  const login = (userId, token) => {\n    setUserId(userId);\n    setToken(token);\n    // Store the token in localStorage or cookies for persistence\n    // localStorage.setItem('token', token);\n    localStorage.setItem('userId', userId);\n    localStorage.setItem('token', token);\n  };\n  const logout = () => {\n    setUserId(null);\n    setToken(null);\n    // Remove the token from localStorage or cookies\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n  };\n  useEffect(() => {\n    // Attempt to retrieve the token from localStorage or cookies on component mount\n    // const storedToken = localStorage.getItem('token');\n    const storedToken = localStorage.getItem('token');\n    const storedUserId = localStorage.getItem('userId');\n    if (storedToken && storedUserId) {\n      setToken(storedToken);\n      setUserId(storedUserId);\n    }\n    if (storedToken) {\n      // setToken(storedToken);\n      setUserId(localStorage.getItem('userId'));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      userId,\n      login,\n      logout,\n      token\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n};\n_s(AuthProvider, \"9y+ZtJqMIRi9kiZggXahzW67e7I=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  const {\n    userId,\n    login,\n    logout,\n    token\n  } = context; // Add token\n\n  const isAuthenticated = () => !!token; // Add this function\n\n  return {\n    userId,\n    login,\n    logout,\n    isAuthenticated,\n    token\n  };\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","userId","setUserId","token","setToken","login","localStorage","setItem","logout","removeItem","storedToken","getItem","storedUserId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","isAuthenticated","$RefreshReg$"],"sources":["/Users/aakashsikarwar/Desktop/React SpringBoot App/travel_plan_management_system1/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState,useEffect } from 'react';\n\nconst AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [userId, setUserId] = useState(null);\n\n//   const login = (userId) => {\n//     setUserId(userId);\n//   };\n\n//   const logout = () => {\n//     setUserId(null);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ userId, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n// Import statements\n\nexport const AuthProvider = ({ children }) => {\n  const [userId, setUserId] = useState(null);\n  const [token, setToken] = useState(null); // Add this line\n\n  const login = (userId, token) => {\n      setUserId(userId);\n      setToken(token);\n      // Store the token in localStorage or cookies for persistence\n      // localStorage.setItem('token', token);\n  localStorage.setItem('userId', userId);\n      localStorage.setItem('token', token);\n  };\n\n  const logout = () => {\n      setUserId(null);\n      setToken(null);\n      // Remove the token from localStorage or cookies\n      localStorage.removeItem('token');\n      localStorage.removeItem('userId');\n  };\n\n  useEffect(() => {\n      // Attempt to retrieve the token from localStorage or cookies on component mount\n      // const storedToken = localStorage.getItem('token');\n      const storedToken = localStorage.getItem('token');\n    const storedUserId = localStorage.getItem('userId');\n\n    if (storedToken && storedUserId) {\n        setToken(storedToken);\n        setUserId(storedUserId);\n    }\n      if (storedToken) {\n          // setToken(storedToken);\n          setUserId(localStorage.getItem('userId'));\n      }\n  }, []);\n\n  return (\n      <AuthContext.Provider value={{ userId, login, logout, token }}>\n          {children}\n      </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  const { userId, login, logout, token } = context; // Add token\n\n  const isAuthenticated = () => !!token; // Add this function\n\n  return { userId, login, logout, isAuthenticated, token }; \n\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C,MAAMY,KAAK,GAAGA,CAACJ,MAAM,EAAEE,KAAK,KAAK;IAC7BD,SAAS,CAACD,MAAM,CAAC;IACjBG,QAAQ,CAACD,KAAK,CAAC;IACf;IACA;IACJG,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEN,MAAM,CAAC;IAClCK,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;EACxC,CAAC;EAED,MAAMK,MAAM,GAAGA,CAAA,KAAM;IACjBN,SAAS,CAAC,IAAI,CAAC;IACfE,QAAQ,CAAC,IAAI,CAAC;IACd;IACAE,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;IAChCH,YAAY,CAACG,UAAU,CAAC,QAAQ,CAAC;EACrC,CAAC;EAEDf,SAAS,CAAC,MAAM;IACZ;IACA;IACA,MAAMgB,WAAW,GAAGJ,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;IACnD,MAAMC,YAAY,GAAGN,YAAY,CAACK,OAAO,CAAC,QAAQ,CAAC;IAEnD,IAAID,WAAW,IAAIE,YAAY,EAAE;MAC7BR,QAAQ,CAACM,WAAW,CAAC;MACrBR,SAAS,CAACU,YAAY,CAAC;IAC3B;IACE,IAAIF,WAAW,EAAE;MACb;MACAR,SAAS,CAACI,YAAY,CAACK,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC7C;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIf,OAAA,CAACC,WAAW,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEb,MAAM;MAAEI,KAAK;MAAEG,MAAM;MAAEL;IAAM,CAAE;IAAAJ,QAAA,EACzDA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE7B,CAAC;AAAClB,EAAA,CA1CWF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AA4CzB,OAAO,MAAMsB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAG9B,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACyB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,MAAM;IAAEtB,MAAM;IAAEI,KAAK;IAAEG,MAAM;IAAEL;EAAM,CAAC,GAAGmB,OAAO,CAAC,CAAC;;EAElD,MAAME,eAAe,GAAGA,CAAA,KAAM,CAAC,CAACrB,KAAK,CAAC,CAAC;;EAEvC,OAAO;IAAEF,MAAM;IAAEI,KAAK;IAAEG,MAAM;IAAEgB,eAAe;IAAErB;EAAM,CAAC;AAE1D,CAAC;AAACkB,GAAA,CAXWD,OAAO;AAAA,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}